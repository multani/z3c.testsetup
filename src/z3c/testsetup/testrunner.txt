=============================
z3c.testsetup and testrunners
=============================

Here we discuss complete test setups for the `cave` package contained
in thie `tests` directory. We will run the `zope.testing.testrunner`
and examine their output.

Short setups
------------

Using z3c.testsetup, we can define quite complex testsetups with only
two lines of code::

    >>> import os
    >>> cavepath = os.path.join(os.path.dirname(__file__), 'tests', 'cave')
    >>> setupfile = os.path.join(cavepath, 'samplesetup_short0.py')
    >>> print open(setupfile).read()
    import z3c.testsetup
    test_suite = z3c.testsetup.register_all_tests('z3c.testsetup.tests.cave')

This means, that we want to register all tests (doctests and 'normal'
python tests) from the ``cave`` package, whose name we passed in
dotted name notation as a string. This is enough information for a
testrunner::

    >>> import sys
    >>> defaults = [
    ...     '--path', cavepath,
    ...     '--tests-pattern', '^samplesetup_short0$',
    ...     ]
    >>> sys.argv = 'test '.split()
    >>> from zope.testing import testrunner
    >>> testrunner.run(defaults)
    Running unit tests:
      Ran 2 tests with 0 failures and 0 errors in ... seconds.
    Running z3c.testsetup.doctesting.FunctionalLayer tests:
      Set up z3c.testsetup.doctesting.FunctionalLayer in ... seconds.
      Ran 2 tests with 0 failures and 0 errors in ... seconds.
    Tearing down left over layers:
      Tear down z3c.testsetup.doctesting.FunctionalLayer ... not supported
    Total: 4 tests, 0 failures, 0 errors in ... seconds.
    False

Of the four tests apparently run, there is one 'normal' python test
and three doctests, of which two are functional doctests.

Now, we only want to run the doctests in the ``cave`` package. A
suitable setup is contained in `samplesetup_short1.py`` in the
``cave`` package::

    >>> setupfile = os.path.join(cavepath, 'samplesetup_short1.py')
    >>> print open(setupfile).read()
    import z3c.testsetup
    <BLANKLINE>
    test_suite = z3c.testsetup.register_doctests('z3c.testsetup.tests.cave')

This means, that we want to register all doctests from the ``cave``
package, whose name we passed in dotted name notation as a
string. This is enough information for a testrunner::

    >>> defaults = [
    ...     '--path', cavepath,
    ...     '--tests-pattern', '^samplesetup_short1$',
    ...     ]
    >>> sys.argv = 'test '.split()
    >>> from zope.testing import testrunner
    >>> testrunner.run(defaults)
    Running unit tests:
      Ran 1 tests with 0 failures and 0 errors in ... seconds.
    Running z3c.testsetup.doctesting.FunctionalLayer tests:
      Set up z3c.testsetup.doctesting.FunctionalLayer in ... seconds.
      Ran 2 tests with 0 failures and 0 errors in ... seconds.
    Tearing down left over layers:
      Tear down z3c.testsetup.doctesting.FunctionalLayer ... not supported
    Total: 3 tests, 0 failures, 0 errors in ... seconds.
    False

In the above setup the handled package was given as a string with
dotted name notation. We can instead also pass the package itself, if
it was loaded before. This results in a slight longer example::

    >>> setupfile = os.path.join(cavepath, 'samplesetup_short2.py')
    >>> print open(setupfile).read()
    import z3c.testsetup
    from z3c.testsetup.tests import cave
    <BLANKLINE>
    test_suite = z3c.testsetup.register_doctests(cave)


Here we register all doctests from the ``cave`` module. Let's start a
testrunner with this setup::

    >>> defaults = [
    ...     '--path', cavepath,
    ...     '--tests-pattern', '^samplesetup_short2$',
    ...     ]
    >>> sys.argv = 'test '.split()
    >>> from zope.testing import testrunner
    >>> testrunner.run(defaults)
    Running unit tests:
      Ran 1 tests with 0 failures and 0 errors in ... seconds.
    Running z3c.testsetup.doctesting.FunctionalLayer tests:
      Set up z3c.testsetup.doctesting.FunctionalLayer in ... seconds.
      Ran 2 tests with 0 failures and 0 errors in ... seconds.
    Tearing down left over layers:
      Tear down z3c.testsetup.doctesting.FunctionalLayer ... not supported
    Total: 3 tests, 0 failures, 0 errors in ... seconds.
    False

Now let's run a suite of 'normal' python unit tests, i.e. tests, that
are not doctests. An appropriate setup file might look like this::

    >>> setupfile = os.path.join(cavepath, 'samplesetup_short3.py')
    >>> print open(setupfile).read()
    import z3c.testsetup
    from z3c.testsetup.tests import cave
    <BLANKLINE>
    test_suite = z3c.testsetup.register_pytests(cave)


The only difference to the example before is, that we use
`register_pytests` instead of `register_doctests`. If we run this
setup with the testrunner, one test should be found and executed. This
time we pass the `-vv` option to the testrunner, to get some more
information from the run::

    >>> defaults = [
    ...     '--path', cavepath,
    ...     '--tests-pattern', '^samplesetup_short3$',
    ...     ]
    >>> sys.argv = 'test -vv'.split()
    >>> from zope.testing import testrunner
    >>> testrunner.run(defaults)
    Running tests at level 1
    Running unit tests:
      Running:
     testFoo (z3c.testsetup.tests.cave.file1.TestTest)
      Ran 1 tests with 0 failures and 0 errors in ... seconds.
    False


Modified short setups
---------------------

The default settings of test setups might serve for plain testing
environments. Especially for functional tests, however, one often want
to set some basic values not foreseeable by default. Here some hints,
how default settings can be tweaked.

Setting ZCML config file for functional tests
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Functional tests often require ZCML registration of components to make
sense. For example one wants to register permissions etc. for use with
a testbrowser. In other words: often one wants to register a custom
ZCML layer when running functional doctests. This can be archieved as
follows:

We wrote a (more or less empty) ZCML config file in the ``cave``
package, which we want to be registered with functional doctests. To
do that, we use the now well-known ``register_all_tests`` function,
but give a ZCML file path and a layer name as arguments::

    >>> setupfile = os.path.join(cavepath, 'samplesetup_short4.py')
    >>> print open(setupfile).read()
    import z3c.testsetup
    test_suite = z3c.testsetup.register_all_tests(
        'z3c.testsetup.tests.cave',
        zcml_config='sampleftesting.zcml',
        layer_name = 'SampleLayer')

This will result in::

    >>> defaults = [
    ...     '--path', cavepath,
    ...     '--tests-pattern', '^samplesetup_short4$',
    ...     ]
    >>> sys.argv = 'test '.split()
    >>> from zope.testing import testrunner
    >>> testrunner.run(defaults)
    Running unit tests:
      Ran 2 tests with 0 failures and 0 errors in ... seconds.
    Running z3c.testsetup.tests.cave.SampleLayer tests:
      Set up z3c.testsetup.tests.cave.SampleLayer in ... seconds.
      Ran 2 tests with 0 failures and 0 errors in ... seconds.
    Tearing down left over layers:
      Tear down z3c.testsetup.tests.cave.SampleLayer ... not supported
    Total: 4 tests, 0 failures, 0 errors in ... seconds.
    False

Apparently now the custom ZCML file in the ``cave`` package was used.


Extended setups
---------------

Let's have a look at the test setup module `samplesetup1` in the
`cave` package::

    >>> setupfile = os.path.join(cavepath, 'samplesetup1.py')
    >>> print open(setupfile).read()
    import unittest
    import z3c.testsetup
    from z3c.testsetup.tests import cave # The package that contains
                                         # the doctest files
    def test_suite():
        suite = unittest.TestSuite()
        suite.addTest( # Add all unittests from `cave`
            z3c.testsetup.UnitDocTestSetup(cave).getTestSuite())
        suite.addTest( # Add all functional tests from `cave`
            z3c.testsetup.FunctionalDocTestSetup(cave).getTestSuite())
        return suite


As we see, there is a unittest setup and a functional test setup
initialized. Both collect one kind of tests and feed their collection
in the same testsuite (where each kind of tests is setup differently,
of course). 

Now let's run a testrunner and see the result. The testrunner will be
configured such, that all files named 'samplesetup1.py' will be asked
to return a testsuite::

    >>> defaults = [
    ...     '--path', cavepath,
    ...     '--tests-pattern', '^samplesetup1$',
    ...     ]
    >>> sys.argv = 'test '.split()
    >>> from zope.testing import testrunner
    >>> testrunner.run(defaults)
    Running unit tests:
      Ran 1 tests with 0 failures and 0 errors in ... seconds.
    Running z3c.testsetup.doctesting.FunctionalLayer tests:
      Set up z3c.testsetup.doctesting.FunctionalLayer in ... seconds.
      Ran 2 tests with 0 failures and 0 errors in ... seconds.
    Tearing down left over layers:
      Tear down z3c.testsetup.doctesting.FunctionalLayer ... not supported
    Total: 3 tests, 0 failures, 0 errors in ... seconds.
    False

We ran one unittest and two functional tests.
